namespace NuminaBit.Services.Ciphers.DES.Constants
{
    public static class Tables
    {
        public static readonly int[] IP =
        [
            40,8,48,16,56,24,64,32,
            39,7,47,15,55,23,63,31,
            38,6,46,14,54,22,62,30,
            37,5,45,13,53,21,61,29,
            36,4,44,12,52,20,60,28,
            35,3,43,11,51,19,59,27,
            34,2,42,10,50,18,58,26,
            33,1,41,9,49,17,57,25
        ];

        public static readonly int[] FP =
        [
            58,50,42,34,26,18,10,2,
            60,52,44,36,28,20,12,4,
            62,54,46,38,30,22,14,6,
            64,56,48,40,32,24,16,8,
            57,49,41,33,25,17,9,1,
            59,51,43,35,27,19,11,3,
            61,53,45,37,29,21,13,5,
            63,55,47,39,31,23,15,7
        ];  

        public static readonly int[] E =
        [
            32,1,2,3,4,5,
            4,5,6,7,8,9,
            8,9,10,11,12,13,
            12,13,14,15,16,17,
            16,17,18,19,20,21,
            20,21,22,23,24,25,
            24,25,26,27,28,29,
            28,29,30,31,32,1
        ];

        public static readonly Dictionary<int, int[]> E_INV = new()
        {
            {1, new int[] {2, 48}},
            {2, new int[] {3}},
            {3, new int[] {4}},
            {4, new int[] {5, 7}},
            {5, new int[] {6, 8}},
            {6, new int[] {9}},
            {7, new int[] {10}},
            {8, new int[] {11, 13}},
            {9, new int[] {12, 14}},
            {10, new int[] {15}},
            {11, new int[] {16}},
            {12, new int[] {17, 19}},
            {13, new int[] {18, 20}},
            {14, new int[] {21}},
            {15, new int[] {22}},
            {16, new int[] {23, 25}},
            {17, new int[] {24, 26}},
            {18, new int[] {27}},
            {19, new int[] {28}},
            {20, new int[] {29, 31}},
            {21, new int[] {30, 32}},
            {22, new int[] {33}},
            {23, new int[] {34}},
            {24, new int[] {35, 37}},
            {25, new int[] {36, 38}},
            {26, new int[] {39}},
            {27, new int[] {40}},
            {28, new int[] {41, 43}},
            {29, new int[] {42, 44}},
            {30, new int[] {45}},
            {31, new int[] {46}},
            {32, new int[] {47, 1}}
        };

        public static readonly int[] P =
        [
            12, 18, 6, 28, 26, 11, 21, 1,
            14, 22, 4, 29, 30, 8, 19, 25,
            32, 23, 13, 7, 27, 3, 17, 9,
            15, 31, 5, 20, 2, 10, 16, 24
        ];

        public static readonly int[] P_INV =
        [
            8, 29, 22, 11, 27, 3, 19, 14,
            24, 30, 6, 1, 19, 9, 25, 31,
            23, 2, 15, 28, 7, 10, 18, 32,
            16, 5, 23, 4, 12, 13, 26, 17
        ];

        public static readonly int[] P2 =
        [
            16,7,20,21,29,12,28,17,
            1,15,23,26,5,18,31,10,
            2,8,24,14,32,27,3,9,
            19,13,30,6,22,11,4,25
        ];

        public static readonly int[] PC1 =
        [
            57,49,41,33,25,17,9,
            1,58,50,42,34,26,18,
            10,2,59,51,43,35,27,
            19,11,3,60,52,44,36,
            63,55,47,39,31,23,15,
            7,62,54,46,38,30,22,
            14,6,61,53,45,37,29,
            21,13,5,28,20,12,4
        ];

        public static readonly int[] PC2 =
        [
            14,17,11,24,1,5,
            3,28,15,6,21,10,
            23,19,12,4,26,8,
            16,7,27,20,13,2,
            41,52,31,37,47,55,
            30,40,51,45,33,48,
            44,49,39,56,34,53,
            46,42,50,36,29,32
        ];

        public static readonly int[,] MatsuiTable = new int[16, 48]
        {
            // K1 bits (row 0)
            {23, 26, 19, 5, 13, 9, 2, 21, 27, 16, 6, 11, 7, 22, 10, 4, 25, 18, 1, 15, 24, 12, 8, 17, 3, 14, 20, 2, 11, 25, 4, 19, 20, 3, 2, 13, 14, 22, 21, 2, 1, 10, 9, 12, 11, 15, 16, 17},
            // K2 bits (row 1)
            {22, 25, 18, 4, 12, 8, 1, 20, 26, 15, 5, 10, 6, 21, 9, 3, 24, 17, 27, 14, 23, 11, 7, 16, 2, 13, 19, 1, 10, 24, 3, 18, 19, 2, 1, 12, 13, 21, 20, 1, 27, 9, 8, 11, 10, 14, 15, 16},
            // K3 bits (row 2)
            {20, 23, 16, 2, 10, 6, 27, 18, 24, 13, 3, 8, 4, 19, 7, 1, 22, 15, 25, 12, 21, 9, 5, 14, 0, 11, 17, 27, 8, 22, 1, 16, 17, 0, 27, 10, 11, 19, 18, 27, 25, 7, 6, 9, 8, 12, 13, 14},
            // K4 bits (row 3)
            {18, 21, 14, 0, 8, 4, 25, 16, 22, 11, 1, 6, 2, 17, 5, 27, 20, 13, 23, 10, 19, 7, 3, 12, 26, 9, 15, 25, 6, 20, 27, 14, 15, 25, 26, 8, 9, 17, 16, 25, 23, 5, 4, 7, 6, 10, 11, 12},
            // K5 bits (row 4)
            {16, 19, 12, 26, 6, 2, 23, 14, 20, 9, 27, 4, 0, 15, 3, 25, 18, 11, 21, 8, 17, 5, 1, 10, 24, 7, 13, 23, 4, 18, 25, 12, 13, 23, 24, 6, 7, 15, 14, 23, 21, 3, 2, 5, 4, 8, 9, 10},
            // K6 bits (row 5)
            {14, 17, 10, 24, 4, 0, 21, 12, 18, 7, 25, 2, 26, 13, 1, 23, 16, 9, 19, 6, 15, 3, 27, 8, 22, 5, 11, 21, 2, 16, 23, 10, 11, 21, 22, 4, 5, 13, 12, 21, 19, 1, 0, 3, 2, 6, 7, 8},
            // K7 bits (row 6)
            {12, 15, 8, 22, 2, 26, 19, 10, 16, 5, 23, 0, 24, 11, 27, 21, 14, 7, 17, 4, 13, 1, 25, 6, 20, 3, 9, 19, 0, 14, 21, 8, 9, 19, 20, 2, 3, 11, 10, 19, 17, 27, 26, 1, 0, 4, 5, 6},
            // K8 bits (row 7)
            {10, 13, 6, 20, 0, 24, 17, 8, 14, 3, 21, 26, 22, 9, 25, 19, 12, 5, 15, 2, 11, 27, 23, 4, 18, 1, 7, 17, 26, 12, 19, 6, 7, 17, 18, 0, 1, 9, 8, 17, 15, 25, 24, 27, 26, 2, 3, 4},
            // K9 bits (row 8)
            {9, 12, 5, 19, 27, 23, 16, 7, 13, 2, 20, 25, 21, 8, 24, 18, 11, 4, 14, 1, 10, 26, 22, 3, 17, 0, 6, 16, 25, 11, 18, 5, 6, 16, 17, 27, 0, 8, 7, 16, 14, 24, 23, 26, 25, 1, 2, 3},
            // K10 bits (row 9)
            {7, 10, 3, 17, 25, 21, 14, 5, 11, 0, 18, 23, 19, 6, 22, 16, 9, 2, 12, 27, 8, 24, 20, 1, 15, 26, 4, 14, 23, 9, 16, 3, 4, 14, 15, 25, 27, 6, 5, 14, 12, 22, 21, 24, 23, 27, 0, 1},
            // K11 bits (row 10)
            {5, 8, 1, 15, 23, 19, 12, 3, 9, 26, 16, 21, 17, 4, 20, 14, 7, 0, 10, 25, 6, 22, 18, 27, 13, 24, 2, 12, 21, 7, 14, 1, 2, 12, 13, 23, 25, 4, 3, 12, 10, 20, 19, 22, 21, 25, 27, 26},
            // K12 bits (row 11)
            {3, 6, 27, 13, 21, 17, 10, 1, 7, 24, 14, 19, 15, 2, 18, 12, 5, 26, 8, 23, 4, 20, 16, 25, 11, 22, 0, 10, 19, 5, 12, 27, 0, 10, 11, 21, 23, 2, 1, 10, 8, 18, 17, 20, 19, 23, 25, 24},
            // K13 bits (row 12)
            {1, 4, 25, 11, 19, 15, 8, 27, 5, 22, 12, 17, 13, 0, 16, 10, 3, 24, 6, 21, 2, 18, 14, 23, 9, 20, 26, 8, 17, 3, 10, 25, 26, 8, 9, 19, 21, 0, 27, 8, 6, 16, 15, 18, 17, 21, 23, 22},
            // K14 bits (row 13)
            {27, 2, 23, 9, 17, 13, 6, 25, 3, 20, 10, 15, 11, 26, 14, 8, 1, 22, 4, 19, 0, 16, 12, 21, 7, 18, 24, 6, 15, 1, 8, 23, 24, 6, 7, 17, 19, 26, 25, 6, 4, 14, 13, 16, 15, 19, 21, 20},
            // K15 bits (row 14)
            {25, 0, 21, 7, 15, 11, 4, 23, 1, 18, 8, 13, 9, 24, 12, 6, 27, 20, 2, 17, 26, 14, 10, 22, 5, 16, 22, 4, 13, 27, 6, 21, 22, 4, 5, 15, 17, 24, 23, 4, 2, 12, 11, 14, 13, 17, 19, 18},
            // K16 bits (row 15)
            {24, 27, 20, 6, 14, 10, 3, 22, 0, 17, 7, 12, 8, 23, 11, 5, 26, 19, 1, 16, 25, 13, 9, 21, 4, 15, 21, 3, 12, 25, 5, 20, 21, 3, 4, 14, 16, 23, 22, 3, 1, 11, 10, 13, 12, 16, 18, 17}
        };

        public static readonly int[] SHIFTS = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];

        public static readonly int[,,] SBOX = new int[8, 4, 16]
        {
            // S1
            {
                {14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1},
                {3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8},
                {4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7},
                {15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13}
            },
            // S2
            {
                {15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14},
                {9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5},
                {0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2},
                {5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9}
            },
            // S3
            {
                {10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10},
                {1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1},
                {13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7},
                {11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12}
            },
            // S4
            {
                {7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3},
                {1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9},
                {10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8},
                {15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14}
            },
            // S5
            {
                {2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1},
                {8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6},
                {4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13},
                {15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3}
            },
            // S6
            {
                {12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5},
                {0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8},
                {9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10},
                {7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13}
            },
            // S7
            {
                {4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10},
                {3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6},
                {1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7},
                {10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12}
            },
            // S8
            {
                {13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4},
                {10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2},
                {7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13},
                {0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11}
            }
        };
    }
}
